[build-system]
build-backend = "uv_build"
requires = ["uv_build>=0.9.0,<0.10.0"]

[project]
name = "cucumber-tag-expressions"
authors = [
    {name = "Jens Engel", email = "jenisys@noreply.github.com"},
]
description = "Provides a tag-expression parser and evaluation logic for cucumber/behave"
version = "7.0.0"
keywords= ["BDD", "testing", "cucumber", "tag-expressions", "behave"]
license = "MIT"
license-files = [
    "LICENSE"
]
readme = "README.rst"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/cucumber/tag-expressions"
Download = "https://pypi.org/project/cucumber-tag-expressions"
Repository = "https://github.com/cucumber/tag-expressions"
Issues = "https://github.com/cucumber/tag-expressions/issues/"
Changelog = "https://github.com/cucumber/tag-expressions/releases"

[dependency-groups]
dev = [
    "ruff>=0.14.0",
    "coverage>=7.10.7",
    "pytest>=6.0.1",
    "pyyaml>=6.0.3",
]

[tool.ruff.lint]
extend-select = [
  "B",
  "C4",
  "FURB",
  "I",
  "ISC",
  "N",
  "PERF",
  "PIE",
  "RET",
  "S",
  "TID",
  "UP"
]

[tool.ruff.lint.per-file-ignores]
# Allow assert statements in tests
"tests/**" = ["S101"]

[tool.pytest.ini_options]
addopts = "--doctest-modules"
testpaths = [
    "README.rst",
    "src",
    "tests",
]

[tool.coverage.run]
source = ["cucumber_tag_expressions"]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true

[tool.coverage.html]
directory = "build/coverage.html"

[tool.coverage.xml]
output = "build/coverage.xml"
